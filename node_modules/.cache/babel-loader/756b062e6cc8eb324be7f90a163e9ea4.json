{"ast":null,"code":"var _jsxFileName = \"/home/artur/projetos-para-gh-pages/StarWarsPlanetSearch/src/context/Provider.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport myContext from './myContext';\nexport default function Provider({\n  children\n}) {\n  const INITIAL_OPTIONS = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n  const [planets, setPlanets] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [options, setOptions] = useState(INITIAL_OPTIONS);\n  const state = {\n    planets,\n    setPlanets,\n    filterByName: {\n      name: nameFilter\n    },\n    setNameFilter,\n    filterByNumericValues,\n    setFilterByNumericValues,\n    options,\n    setOptions\n  };\n  return /*#__PURE__*/React.createElement(myContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, children);\n}\nProvider.propTypes = {\n  children: PropTypes.node.isRequired\n};","map":{"version":3,"sources":["/home/artur/projetos-para-gh-pages/StarWarsPlanetSearch/src/context/Provider.js"],"names":["React","useState","PropTypes","myContext","Provider","children","INITIAL_OPTIONS","planets","setPlanets","nameFilter","setNameFilter","filterByNumericValues","setFilterByNumericValues","options","setOptions","state","filterByName","name","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,eAAe,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC7C,QAAMC,eAAe,GAAG,CAAC,YAAD,EAAe,gBAAf,EACtB,UADsB,EACV,iBADU,EACS,eADT,CAAxB;AAGA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8BT,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACU,qBAAD,EAAwBC,wBAAxB,IAAoDX,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACY,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAACK,eAAD,CAAtC;AAEA,QAAMS,KAAK,GAAG;AACZR,IAAAA,OADY;AAEZC,IAAAA,UAFY;AAGZQ,IAAAA,YAAY,EAAE;AACZC,MAAAA,IAAI,EAAER;AADM,KAHF;AAMZC,IAAAA,aANY;AAOZC,IAAAA,qBAPY;AAQZC,IAAAA,wBARY;AASZC,IAAAA,OATY;AAUZC,IAAAA;AAVY,GAAd;AAaA,sBACE,oBAAC,SAAD,CAAW,QAAX;AAAoB,IAAA,KAAK,EAAGC,KAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,QADH,CADF;AAKD;AAEDD,QAAQ,CAACc,SAAT,GAAqB;AACnBb,EAAAA,QAAQ,EAAEH,SAAS,CAACiB,IAAV,CAAeC;AADN,CAArB","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport myContext from './myContext';\n\nexport default function Provider({ children }) {\n  const INITIAL_OPTIONS = ['population', 'orbital_period',\n    'diameter', 'rotation_period', 'surface_water'];\n\n  const [planets, setPlanets] = useState([]);\n  const [nameFilter, setNameFilter] = useState('');\n  const [filterByNumericValues, setFilterByNumericValues] = useState([]);\n  const [options, setOptions] = useState(INITIAL_OPTIONS);\n\n  const state = {\n    planets,\n    setPlanets,\n    filterByName: {\n      name: nameFilter,\n    },\n    setNameFilter,\n    filterByNumericValues,\n    setFilterByNumericValues,\n    options,\n    setOptions,\n  };\n\n  return (\n    <myContext.Provider value={ state }>\n      {children}\n    </myContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}